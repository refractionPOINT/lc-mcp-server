# Google Cloud Build configuration for deploying LimaCharlie MCP Server
#
# This is a separate deployment configuration for production deployments.
# Use this when you want to deploy a specific image that's already been built.
#
# Usage:
#   gcloud builds submit --config=cloudbuild-deploy.yaml \
#     --substitutions=_IMAGE_TAG=abc123,_ENV=production
#
# This configuration:
# 1. Validates the image exists
# 2. Runs security scanning (optional)
# 3. Deploys to Cloud Run with production settings

steps:
  # Step 1: Verify image exists
  - name: 'gcr.io/cloud-builders/docker'
    id: 'verify-image'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Verifying image exists..."
        gcloud artifacts docker images describe \
          ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:${_IMAGE_TAG}

  # Step 2: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}-${_ENV}'
      - '--image'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:${_IMAGE_TAG}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--no-allow-unauthenticated'  # Require authentication for production
      - '--set-env-vars'
      - 'MCP_MODE=${_MCP_MODE},MCP_PROFILE=${_MCP_PROFILE},LOG_LEVEL=${_LOG_LEVEL},SDK_CACHE_TTL=${_SDK_CACHE_TTL}'
      - '--set-secrets'
      - 'LC_OID=lc-oid:latest,LC_API_KEY=lc-api-key:latest,LC_JWT_PUBLIC_KEY=lc-jwt-public-key:latest'
      - '--memory'
      - '${_MEMORY}'
      - '--cpu'
      - '${_CPU}'
      - '--min-instances'
      - '${_MIN_INSTANCES}'
      - '--max-instances'
      - '${_MAX_INSTANCES}'
      - '--concurrency'
      - '${_CONCURRENCY}'
      - '--timeout'
      - '${_TIMEOUT}'
      - '--port'
      - '8080'
      - '--use-http2'
      - '--service-account'
      - '${_SERVICE_ACCOUNT}'
    waitFor: ['verify-image']

  # Step 3: Verify deployment health
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'verify-deployment'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Verifying deployment..."
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME}-${_ENV} \
          --region ${_REGION} \
          --format 'value(status.url)')
        echo "Service URL: $SERVICE_URL"

        # Check service is ready (status check)
        READY=$(gcloud run services describe ${_SERVICE_NAME}-${_ENV} \
          --region ${_REGION} \
          --format 'value(status.conditions[0].status)')

        if [ "$READY" != "True" ]; then
          echo "Service not ready: $READY"
          exit 1
        fi

        echo "Deployment successful!"
    waitFor: ['deploy']

# Build options
options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY
  timeout: '900s'

# Substitutions for different environments
substitutions:
  # Image configuration
  _REGION: 'us-central1'
  _REPOSITORY: 'lc-mcp-server'
  _IMAGE_NAME: 'lc-mcp-server'
  _IMAGE_TAG: 'latest'

  # Service configuration
  _SERVICE_NAME: 'lc-mcp-server'
  _ENV: 'staging'  # or 'production'

  # Runtime configuration
  _MCP_MODE: 'stdio'
  _MCP_PROFILE: 'all'
  _LOG_LEVEL: 'info'
  _SDK_CACHE_TTL: '5m'

  # Resource configuration
  _MEMORY: '512Mi'
  _CPU: '1'
  _MIN_INSTANCES: '0'
  _MAX_INSTANCES: '10'
  _CONCURRENCY: '80'
  _TIMEOUT: '300s'

  # Security configuration
  _SERVICE_ACCOUNT: 'lc-mcp-server@${PROJECT_ID}.iam.gserviceaccount.com'

# Tags for organization
tags:
  - 'lc-mcp-server'
  - 'deployment'
  - '${_ENV}'
